// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  DEFAULT
  CADASTRE
  REPORT
}

enum UnitType {
  KG
  G
  L
  UN
}

enum ProductType {
  DONATED
  PURCHASED
}

enum AlertType {
  EXPIRED
  EXPIRING
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

model User {
  id String @id @default(cuid())

  name          String?   @db.VarChar(50)
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserType  @default(DEFAULT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AuditLog AuditLog[]

  @@index([id, email])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([token])
}

model Notification {
  id String @id @default(cuid())

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  type      AlertType
  isRead    Boolean   @default(false)

  createdAt DateTime @default(now()) @db.Date

  @@index([type, isRead])
}

model AuditLog {
  id String @id @default(cuid())

  user            User       @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId          String
  recordChangedId String
  actionType      String     @db.VarChar(30)
  actionCategory  String     @db.VarChar(30)
  value           String     @db.VarChar(150)
  observation     String     @db.VarChar(200)

  createdAt       DateTime   @default(now())
}

model MasterProduct {
  id Int @id @default(autoincrement())

  name     String   @db.VarChar(150)
  baseUnit UnitType
  category String   @db.VarChar(50)
  group    String   @db.VarChar(50)
  subgroup String?  @db.VarChar(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  @@index([name, baseUnit])
}

model Product {
  id Int @id @default(autoincrement())

  masterProduct   MasterProduct @relation(fields: [masterProductId], references: [id], onDelete: NoAction)
  masterProductId Int

  name             String      @db.VarChar(150)
  quantity         Float       @db.Real
  unit             UnitType
  unitWeight       Float?      @db.Real
  unitOfUnitWeight UnitType?
  lot              String      @db.VarChar(50)
  validityDate     DateTime    @db.Date
  receiptDate      DateTime    @db.Date
  receiver         String      @db.VarChar(150)
  supplier         String?     @db.VarChar(150)
  productType      ProductType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification  Notification[]
  StockMovement StockMovement[]

  @@index([validityDate])
}

model StockMovement {
  id String @id @default(cuid())

  product          Product  @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId        Int
  quantity         Float    @db.Real
  unit             UnitType
  movementType     String   @db.VarChar(30)
  movementCategory String   @db.VarChar(30)
  observation      String   @db.VarChar(200)

  createdAt DateTime @default(now())

  @@index([productId, movementType])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now())
}

model Group {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now())
}

model Subgroup {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(50)
  createdAt DateTime @default(now())
}

model Receiver {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(150)
  createdAt DateTime @default(now())
}

model Supplier {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(150)
  createdAt DateTime @default(now())
}
